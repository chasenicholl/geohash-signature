#!/usr/bin/env python
"""
geohash-signature <geojson>string|file
    --filter=intersects|within --geohash_level=<1-12>
"""

import os.path
import sys
import json
import geohash_signature
from shapely.geometry import shape as ShapelyShape


def is_file_path(string):
    """Is string a file path?"""
    return os.path.isfile(string)


def to_shapely_shape(geojson):
    """Convert GeoJSON to Shapely Shape"""
    return ShapelyShape(geojson)


def get_filter():
    """Get the filter method. Default to intersects"""
    for arg in sys.argv:
        if '--filter' in arg:
            return arg.replace('--filter=', '')
    return 'intersects'


def get_geohash_level():
    """Get the geohash level to use, default to 9"""
    for arg in sys.argv:
        if '--geohash_level' in arg:
            return int(arg.replace('--geohash_level=', ''))
    return 9


def compress_response():
    """Get the geohash level to use, default to 9"""
    for arg in sys.argv:
        if '--compress' in arg:
            return True
    return False


def main():
    """entrypoint"""
    geojson = None
    if is_file_path(sys.argv[1]) is True:
        with open(sys.argv[1]) as file:
            geojson = json.load(file)
    else:
        geojson = json.loads(sys.argv[1])
    if geojson is None:
        return sys.exit(1)

    shape = to_shapely_shape(geojson)
    filter_type = get_filter()
    geohash_level = get_geohash_level()
    if hasattr(geohash_signature, filter_type) is True:
        geohashes = getattr(geohash_signature, filter_type)(shape,
                                                            geohash_level)
        if compress_response() is False:
            return print(geohashes)
        instance = geohash_signature.GeohashSignature
        prefix, hashes = instance.compress_hashes(geohashes)
        return print('{}:{}'.format(prefix, ','.join(hashes)))

if __name__ == '__main__':
    main()
